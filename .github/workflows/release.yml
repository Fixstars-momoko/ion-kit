name: Release

on:
  push:
    tags:
      - v*

jobs:
  build-llvm:
    runs-on: ubuntu-18.04

    steps:
      - name: Setup base dependencies
        run: sudo apt-get install -y zlib1g-dev

      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@latest

      - uses: actions/checkout@v2
        with:
          repository: llvm/llvm-project
          ref: release/12.x
          fetch-depth: 1

      - name: Debug
        run: |
            sudo apt-get install -y tree
            tree -L 3 ${{ runner.workspace }}

            # - name: create build environment
            #   run: cmake -E make_directory ${{runner.workspace}}/ion-kit/llvm-project/build

            # - name: Cache builds
            #   uses: actions/cache@v2
            #   with:
            #     path: ${{runner.workspace}}/ion-kit/llvm-project/build
            #     key: ${{ runner.os }}-llvm-project-build

            # - name: Configure CMake
            #   shell: bash
            #   working-directory: ${{runner.workspace}}/ion-kit/llvm-project/build
            #   run: cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;lld;clang-tools-extra" -DLLVM_TARGETS_TO_BUILD="X86;ARM;NVPTX;AArch64;Mips;Hexagon;PowerPC;AMDGPU;RISCV" -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_BUILD_32_BITS=OFF ../llvm

            # - name: Build
            #   working-directory: ${{runner.workspace}}/ion-kit/llvm-project/build
            #   shell: bash
            #   run: cmake --build . --target install


  release-linux:
    runs-on: ubuntu-18.04
    needs: build-llvm

    steps:
      # Base
      - name: Setup base dependencies
        run: |
          # Packages
          sudo apt-get update
          sudo apt-get install -y doxygen zlib1g-dev
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@latest

      # LLVM
      - uses: actions/checkout@v2
        with:
          repository: llvm/llvm-project
          ref: release/12.x
          fetch-depth: 1

      - name: create build environment
        run: cmake -E make_directory ${{runner.workspace}}/ion-kit/llvm-project/build

      - name: Cache builds
        uses: actions/cache@v2
        with:
          path: ${{runner.workspace}}/ion-kit/llvm-project/build
          key: ${{ runner.os }}-llvm-project-build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/ion-kit/llvm-project/build
        run: cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;lld;clang-tools-extra" -DLLVM_TARGETS_TO_BUILD="X86;ARM;NVPTX;AArch64;Mips;Hexagon;PowerPC;AMDGPU;RISCV" -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_BUILD_32_BITS=OFF ../llvm

      - name: Build
        working-directory: ${{runner.workspace}}/ion-kit/llvm-project/build
        shell: bash
        run: cmake --build . --target install

      # Halide
      - uses: actions/checkout@v2
        with:
          repository: halide/Halide
          path: ${{runner.workspace}}/ion-kit/Halide
          ref: v12.0.1
          fetch-depth: 1

      - name: create build environment
        run: cmake -E make_directory ${{runner.workspace}}/ion-kit/Halide/build

      - name: Cache builds
        uses: actions/cache@v2
        with:
          path: ${{runner.workspace}}/ion-kit/Halide/build
          key: ${{ runner.os }}-Halide-build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/ion-kit/Halide/build
        run: cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DHALIDE_ENABLE_RTTI=ON -DWITH_APPS=OFF ..

      - name: Build
        working-directory: ${{runner.workspace}}/ion-kit/Halide/build
        shell: bash
        run: cmake --build . --target install

      # Extra
      - name: Setup OpenCV
        uses: Dovyski/setup-opencv-action@v1
        with:
          opencv-version: '4.5.2'

      # ion-kit
      - uses: actions/checkout@v2
        with:
          repository: fixstars/ion-kit
          path: ${{runner.workspace}}/ion-kit/ion-kit
          fetch-depth: 1

      - name: create build environment
        run: cmake -E make_directory ${{runner.workspace}}/ion-kit/ion-kit/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/ion-kit/ion-kit/build
        run: cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DION_BUILD_ALL_BB=OFF -DION_BUILD_DOC=OFF -DION_BUILD_TEST=OFF -DION_BUILD_EXAMPLE=OFF -DION_BUNDLE_HALIDE=ON -DWITH_CUDA=OFF ${{runner.workspace}}

      - name: Build
        working-directory: ${{runner.workspace}}/ion-kit/ion-kit/build
        shell: bash
        run: cmake --build . --target package

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ion-kit*.deb
            ion-kit*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@latest

      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1

      - name: Setup extra dependencies
        shell: bash
        run: |
          # Halide
          mkdir ${HOME}/halide
          curl -L https://github.com/halide/Halide/releases/download/v12.0.1/Halide-12.0.1-x86-64-windows-5dabcaa9effca1067f907f6c8ea212f3d2b1d99a.zip -o halide.zip
          unzip halide.zip
          rm halide.zip
          mv Halide*/* ${HOME}/halide

          # Doxygen/Sphinx
          pip3 install sphinx_rtd_theme breathe

      - name: Configure
        shell: bash
        run: cmake -G "Visual Studio 16 2019" -A x64 -D CMAKE_BUILD_TYPE=Release -D CMAKE_PREFIX_PATH=${HOME}/halide -D ION_BUILD_ALL_BB=OFF -D ION_BBS_TO_BUILD="ion-bb-core;ion-bb-image-processing;ion-bb-sgm" -D ION_BUILD_DOC=OFF -D ION_BUILD_TEST=OFF -D ION_BUILD_EXAMPLE=OFF -D ION_BUNDLE_HALIDE=ON -D WITH_CUDA=OFF $GITHUB_WORKSPACE

      - name: Build
        shell: bash
        run: cmake --build . --config Release --target package

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
            files: |
                ion-kit*.zip
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
