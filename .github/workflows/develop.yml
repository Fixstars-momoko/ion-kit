name: Develop

on:
  pull_request:
    branches:
      - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-and-test:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-18.04

    steps:
      - name: Get latest CMake and ninja
      - uses: lukka/get-cmake@latest

      - name: Install base dependencies
        shell: bash
        run: |
            sudo apt-get update
            sudo apt-get install -y curl zlib1g-dev
            sudo apt-get clean
            sudo rm -rf /var/lib/apt/lists/*

      # LLVM
      - uses: actions/checkout@v2
        with:
          repository: llvm/llvm-project
          ref: release/12.x
          fetch-depth: 1

      - name: create build environment
        run: cmake -E make_directory ${{runner.workspace}}/llvm-project/build

      - name: Cache builds
        uses: actions/cache@v2
        with:
          path: ${{runner.workspace}}/llvm-project/build
          key: ${{ runner.os }}-llvm-project-build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/llvm-project/build
        run: cmake -GNinja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DLLVM_ENABLE_PROJECTS="clang;lld;clang-tools-extra" -DLLVM_TARGETS_TO_BUILD="X86;ARM;NVPTX;AArch64;Mips;Hexagon;PowerPC;AMDGPU;RISCV" -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_BUILD_32_BITS=OFF ../llvm

      - name: Build
        working-directory: ${{runner.workspace}}/llvm-project/build
        shell: bash
        run: cmake --build . --target install

      # Halide
      - uses: actions/checkout@v2
        with:
          repository: halide/Halide
          ref: v12.0.1
          fetch-depth: 1

      - name: create build environment
        run: cmake -E make_directory ${{runner.workspace}}/Halide/build

      - name: Cache builds
        uses: actions/cache@v2
        with:
          path: ${{runner.workspace}}/Halide/build
          key: ${{ runner.os }}-Halide-build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/Halide/build
        run: cmake -GNinja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DHALIDE_ENABLE_RTTI=ON -DWITH_APPS=OFF ..

      - name: Build
        working-directory: ${{runner.workspace}}/Halide/build
        shell: bash
        run: cmake --build . --target install

      # Extra
      - name: Setup OpenCV
        uses: Dovyski/setup-opencv-action@v1
        with:
          opencv-version: '4.5.2'

      - name: Setup ONNXRuntime
        shell: bash
        run: |
            mkdir ${HOME}/onnxruntime
            curl -L https://github.com/microsoft/onnxruntime/releases/download/v1.8.1/onnxruntime-linux-x64-1.8.1.tgz | tar zx -C ${HOME}/onnxruntime --strip-components 1
            find ${HOME}/onnxruntime -type d | xargs chmod 755
            sudo cp -r ${HOME}/onnxruntime/* /usr/

      # ion-kit
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: create build environment
        # some projects don't allow in-source building, so create a separate build directory
        # we'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/ion-kit/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/ion-kit/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake -GNinja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DWITH_CUDA=OFF $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{runner.workspace}}/ion-kit/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

      - name: Test
        working-directory: ${{runner.workspace}}/ion-kit/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest --verbose -v -C $BUILD_TYPE
