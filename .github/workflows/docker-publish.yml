name: Docker

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:

env:
  IMAGE_ID_PREFIX: docker.pkg.github.com/${{ github.repository_owner }}

jobs:
  test-ion-core:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ion-core

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build image
        run: docker build --target ion-core-build -t $IMAGE_NAME .

      - name: Run tests
        run: docker run --rm $IMAGE_NAME:latest ctest

  push-ion-core:
    needs: test-ion-core

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    env:
      IMAGE_NAME: ion-core

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Config image name
        run: |
          IMAGE_ID=${IMAGE_ID_PREFIX}/${IMAGE_NAME}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin


      - name: Build image for build stage
        run: docker build --target ion-core-build -t $IMAGE_ID:$VERSION-build-ubuntu18.04 .

      - name: Push image for build stage
        run: docker push $IMAGE_ID:$VERSION-build-ubuntu18.04


      - name: Build image for runtime stage
        run: docker build --target ion-core-runtime -t $IMAGE_ID:$VERSION-runtime-ubuntu18.04 .

      - name: Push image for runtime stage
        run: docker push $IMAGE_ID:$VERSION-runtime-ubuntu18.04


      - name: Build image for release stage
        run: docker build --target ion-core-release -t $IMAGE_ID:$VERSION-release-ubuntu18.04 .

      - name: Push image for relase stage
        run: docker push $IMAGE_ID:$VERSION-relase-ubuntu18.04

  test-ion-kit:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ion-kit

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Initialize git-lfs
        run: git lfs install

      - name: generate lfs file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: restore lfs cache
        uses: actions/cache@v2
        id: cache-lfs
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

      - name: pull lfs files
        run: git lfs pull

      - name: Build image
        run: docker build --target ion-kit-build -t $IMAGE_NAME .

      - name: Run tests
        run: docker run --rm $IMAGE_NAME:latest ctest -V

  push-ion-kit:
    needs: test-ion-kit

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    env:
      IMAGE_NAME: ion-kit

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Config image name
        run: |
          IMAGE_ID=${IMAGE_ID_PREFIX}/${IMAGE_NAME}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin


      - name: Build image for build stage
        run: docker build --target ion-kit-build -t $IMAGE_ID:$VERSION-build-ubuntu18.04 .

      - name: Push image for build stage
        run: docker push $IMAGE_ID:$VERSION-build-ubuntu18.04


      - name: Build image for runtime stage
        run: docker build --target ion-kit-runtime -t $IMAGE_ID:$VERSION-runtime-ubuntu18.04 .

      - name: Push image for runtime stage
        run: docker push $IMAGE_ID:$VERSION-runtime-ubuntu18.04


      - name: Build image for release stage
        run: docker build --target ion-kit-release -t $IMAGE_ID:$VERSION-release-ubuntu18.04 .

      - name: Push image for relase stage
        run: docker push $IMAGE_ID:$VERSION-relase-ubuntu18.04
